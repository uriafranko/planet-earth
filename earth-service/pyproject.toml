# [tool.uv]
# # Exclude common virtual environment directories and artifacts
# exclude = [
#     ".venv",
#     ".git",
#     ".hg",
#     ".mypy_cache",
#     ".tox",
#     ".nox",
#     ".eggs",
#     "*.egg-info",
#     ".ruff_cache",
#     ".pytest_cache",
#     "build",
#     "dist",
# ]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "planet-earth"
version = "0.1.0"
description = "OpenAPI Ingestion & Local Vector-Search Service"
authors = [{ name = "Your Name", email = "you@example.com" }]
license = "MIT"
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Framework :: FastAPI",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    # Core API
    "fastapi>=0.109.0",
    "uvicorn[standard]>=0.27.0",
    "pydantic>=2.11.3",
    "pydantic-settings>=2.0.0",
    # Database & ORM
    "sqlmodel>=0.0.24",
    "psycopg[binary]>=3.1.0",       # Use psycopg[binary] or psycopg depending on needs
    "alembic>=1.13.0",
    "sentence-transformers>=2.3.0", # Check specific model compatibility if needed
    # Task Queue
    "celery>=5.3.0",
    "redis>=5.0.0",
    # OpenAPI Parsing & Validation
    "openapi-schema-validator>=0.6.0",
    "openapi-spec-validator>=0.5.0",
    "jsonref>=1.1.0",
    # Utilities
    "joblib>=1.3.0",
    "python-jose[cryptography]>=3.3.0", # For JWT Auth
    "passlib[bcrypt]>=1.7.4",           # For password hashing if needed
    "python-multipart>=0.0.7",          # For file uploads
    # Observability (Optional, based on PRD)
    # "opentelemetry-api",
    # "opentelemetry-sdk",
    # "opentelemetry-exporter-otlp",
    # "opentelemetry-instrumentation-fastapi",
    # "opentelemetry-instrumentation-requests",
    # "opentelemetry-instrumentation-sqlalchemy",
    # "opentelemetry-instrumentation-celery",
    # "prometheus-fastapi-instrumentator",
    "pgvector>=0.4.0",
    "sqlalchemy==2.0.40",
    "hf-xet>=1.0.3",
    "mcp[cli]>=1.6.0",
    "fastapi-mcp>=0.2.0",
    "torch>=2.6.0",
    "markitdown[docx,pdf]>=0.1.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.26.0",     # For testing FastAPI async client
    "ruff>=0.11.2",
    "pre-commit>=3.6.0",
    "types-redis",
    "types-requests",
]

# [project.scripts]
# start = "uvicorn app.main:app --host 0.0.0.0 --port 8000"
# start-dev = "uvicorn app.main:app --reload --host 0.0.0.0 --port 8000"
# # We use 'make worker' to start the Celery worker instead of an entry point

[tool.ruff]
line-length = 100
target-version = "py311"
# Enable all rules, including those that are fixable
select = ["ALL"]

ignore = [
    "D203",    # Conflicts with D211
    "D212",    # Conflicts with D213
    "E501",    # Line length handled by formatter
    "ANN001",  # Missing type annotation for `self` in method
    "ANN002",  # Missing type annotation for `cls` in classmethod
    "COM812",  # Missing trailing comma
    "G004",
    "ANN",
    "D100",
    "D102",
    "D104",
    "D205",
    "D415",
    "TRY003",
    "TRY300",
    "B008",
    "EM102",
    "N805",
    "PLR0913",
    "FBT",
    "RUF010",
    "RUF013",
    "ARG001",
    "BLE001",
    "TRY301",
    "PTH118",
    "PTH208",
    "ERA001",
    "D103",
    "PGH003",
    "ARG002",
    "D101",
    "PLR2004",
    "FAST002",
    "INP001",
    "DTZ003",
] # Exclude rules that conflict with each other or are too strict

# Allow autofix for all enabled rules (when `--fix` is passed)
fixable = ["ALL"]

unfixable = []

# Exclude a variety of commonly ignored directories
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["app"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"] # Unused imports
"tests/**/*.py" = [
    "S101",    # Use of assert
    "ARG001",  # Unused function argument
    "PLR2004", # Magic value used in comparison
]
"app/db/migrations/**/*.py" = [
    "D",      # Ignore docstring rules in migrations
    "ERA001", # Found commented-out code
]

[tool.pytest.ini_options]
pythonpath = ["."]
# addopts = "-ra -q --cov=app --cov-report=term-missing" # Enable later

[tool.hatch.build.targets.sdist]
exclude = [
    "/.github",
    "/docs",
    "/tests",
    "/.vscode",
    "/.idea",
    "*.lock",
    "*.local",
]

[tool.hatch.build.targets.wheel]
packages = ["app"]
